var ninjas = [];
var allSenseis = [];
var configs = {};

var beltOptions = [
  { text: 'White', value: 0 },
  { text: 'Yellow', value: 1 },
  { text: 'Orange', value: 2 },
  { text: 'Green', value: 3 },
  { text: 'Blue', value: 4 },
  { text: 'Purple', value: 5 },
  { text: 'Brown', value: 6 },
  { text: 'Red', value: 7 },
  { text: 'Black', value: 8 }
];

function findNinja (ninjaGuid) {
  return ninjas[findNinjaKey(ninjaGuid)];
}

function findNinjaKey (ninjaGuid) {
  for (var key = 0; key < ninjas.length; key++) {
    if (ninjas[key].guid == ninjaGuid) {
      return key;
    }
  }
}

function findSenseiName(arr, id) {
  for (var i = 0; i < arr.length; i++) {
    if (arr[i].id == id) {
      return arr[i].name;
    }
  }
  return "Unknown Sensei (" + id + ")";
}

function millisecondsToDateStr(milliseconds) {
  if (milliseconds == null) return null;
  var date = new Date(milliseconds);
  var day = ("0" + date.getDate()).slice(-2);
  var month = ("0" + (date.getMonth() + 1)).slice(-2);
  var year = ("000" + date.getFullYear()).slice(-4);
  return year + "-" + month + "-" + day;
}

function dateStrToMilliseconds(dateStr) {
  if (dateStr == null) return null;
  var date = new Date(dateStr);
  // dateStr comes in the format: yyyy-MM-dd, UTC, ... but if we query the timezone offset, we'll get local timezone offset.
  // We will need to adjust the UTC time by our minutes local offset
  return date.getTime() + 60000 * date.getTimezoneOffset();
}

function dateToYMD(date) {
    var month = '' + (date.getMonth() + 1);
    var day = '' + date.getDate();
    var year = date.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;
    while (year.length < 4) year = '0' + year;

    return [year, month, day].join('-');
}

var ninjaService = {
  findAll(fn) {
    axios
      .get('/ninjas')
      .then(response => fn(response))
      .catch(error => console.log(error))
  },

  findById(guid, fn) {
    axios
      .get('/ninjas/' + guid)
      .then(response => fn(response))
      .catch(error => console.log(error))
  },

  create(ninja, fn) {
    axios
      .post('/ninjas', ninja)
      .then(response => fn(response))
      .catch(error => console.log(error))
  },

  createAllNinjas(fn) {
    axios
      .put('/ninjas/actions/addAll')
      .then(response => fn(response))
      .catch(error => console.log(error))
  },

  update(guid, ninja, fn) {
    axios
      .put('/ninjas/' + guid, ninja)
      .then(response => fn(response))
      .catch(error => console.log(error))
  },

  findNinjaActivities(guid, fn) {
    axios.get('/ninjas/' + guid + '/activities')
    .then(response => fn(response))
    .catch(error => console.log(error))
  },

  findNinjaBelt(guid, fn) {
    axios.get('/ninjas/' + guid + '/beltInfo')
    .then(response => fn(response))
    .catch(error => console.log(error))
  },

  findWaivers(query, fn) {
    var url = '/ninjas/waivers';
    if (query)
      url += '?query=' + query
    axios.get(url)
      .then(response => fn(response))
      .catch(error => console.log(error))
  },

  resetHours(fn) {
    axios.put('/actions/resetHours')
    .then(response => fn(response))
    .catch(error => console.log(error))
  },

  findAllSenseis(fn) {
    axios.get('/senseis')
    .then(response => fn(response))
    .catch(error => console.log(error))
  },

  createSensei(sensei, fn) {
    axios.post('/senseis', sensei)
    .then(response => fn(response))
    .catch(error => console.log(error))
  },

  createJournalComment(comment, fn) {
    axios.post('/ninjas/' + comment.ninjaGuid + '/journalComments', comment)
    .then(response => fn(response))
    .catch(error => console.log(error))
  },

  findNinjaJournalComments(guid, fn) {
    axios.get('/ninjas/' + guid + '/journalComments')
    .then(response => fn(response))
    .catch(error => console.log(error))
  },

  findConfigurations(fn) {
    axios.get('/configurations')
    .then(response => fn(response))
    .catch(error => console.log(error))
  }
}

ninjaService.findAllSenseis(r => { allSenseis = r.data });

ninjaService.findConfigurations(r => {
  r.data.forEach(function (x) {
    console.log("Config: " + x.key + " => " + x.value);
    if (x.key == "codeninjas.waivers.include") {
      configs.waivers = (x.value == "true");
    }
  })
});

var List = Vue.extend({
  template: '#ninja-list',
  data: function () {
    return {ninjas: [], searchKey: '', beltOptions: beltOptions, now: new Date().getTime(), configs: configs };
  },
  methods: {
    isActive(ninja) {
      return !(ninja.frozenDate);
    },
    init() {
      ninjaService.createAllNinjas(r => {
        ninjaService.resetHours(r => {});
      });
    }
  },
  computed: {
    filteredNinjas() {
      return this.ninjas.filter((ninja) => {
        var lowerSearchKey = this.searchKey.toLocaleLowerCase();
      	return ninja.id != null && ninja.id.toLocaleLowerCase().indexOf(lowerSearchKey) >= 0
            || ninja.name != null && ninja.name.toLocaleLowerCase().indexOf(lowerSearchKey) >= 0
            || ninja.scratchId != null && ninja.scratchId.toLocaleLowerCase().indexOf(lowerSearchKey) >= 0
      })
    }
  },
  mounted() {
    ninjaService.findAll(r => {
      const todayDate = new Date();
      const today = todayDate.getTime();
      r.data.forEach(function(ninja) {
        var endDate = today;
        if (ninja.frozenDate) {
          endDate = ninja.frozenDate;
        }
        var days = Math.round((endDate - ninja.startDate) / (24 * 60 * 60 * 1000));
        var weeks = Math.ceil(days / 7);
        if (ninja.hoursStrategy == 1) {
          if (ninja.dropInType == 0)
            ninja.hoursAccrued = weeks * 2 + ninja.carryOverHours;
          else if (ninja.dropInType == 1)
            ninja.hoursAccrued = weeks + ninja.carryOverHours;
        } else {
          const startDate = new Date(ninja.startDate);
          const m1 = startDate.getFullYear() * 12 + startDate.getMonth();
          const m2 = todayDate.getFullYear() * 12 + todayDate.getMonth();
          var monthsElapsed = m2 - m1;
          var daysElapsed = todayDate.getDate() - startDate.getDate();
          if (daysElapsed < 0) {
            monthsElapsed--;
            daysElapsed += 30; // just use an average of 30 days a month
          }

          if (ninja.dropInType == 0) {
            ninja.hoursAccrued = monthsElapsed * 8 + Math.floor((daysElapsed / 4)) + 1;
          } else {
            ninja.hoursAccrued = monthsElapsed * 4 + Math.floor((daysElapsed / 8)) + 1;
          }
        }
      });
      this.ninjas = r.data.sort((a, b) => {
        if (a.signInTimestamp) {
          if (b.signInTimestamp)
            return b.signInTimestamp - a.signInTimestamp;
          else
            return -1;
        } else if (b.signInTimestamp) {
          return 1;
        } else {
          return a.name < b.name ? -1 : 1;
        }
      });
      this.now = today;
      ninjas = this.ninjas;
    })
  }
});

var Ninja = Vue.extend({
  template: '#ninja',
  data: function () {
    var currNinja = findNinja(this.$route.params.guid);

    return {
      ninja: currNinja,
      activities: [],
      showCompletedActivities: "no",
      selectedBelt: currNinja.belt,
      beltOptions: beltOptions,
      allSenseis: allSenseis,
      journalComments: [],
      comment: {ninjaGuid: this.$route.params.guid, timestamp: 0, senseiId: -1, commentText: ''}
    };
  },
  methods: {
    clickHandler: function(belt, event) {
      this.selectedBelt = belt;
      if (event) {
        event.preventDefault();
      }
    },
    createComment(event) {
      if(typeof(String.prototype.trim) === "undefined") {
        String.prototype.trim = function() {
          return String(this).replace(/^\s+|\s+$/g, '');
        };
      }

      if (this.comment.senseiId >= 0 && this.comment.commentText.trim() != "") {
        this.comment.timestamp = new Date().getTime();
        ninjaService.createJournalComment(this.comment, r => { this.comment.commentText = ''; });

        // manually add the entries without remount.
        this.journalComments.unshift({
          ninjaGuid: this.comment.ninjaGuid,
          timestamp: this.comment.timestamp,
          senseiId: this.comment.senseiId,
          commentText: this.comment.commentText,
          senseiName: findSenseiName(allSenseis, this.comment.senseiId)
        });
      }
    }
  },
  computed: {
    filteredActivities() {
      var activities = this.activities.filter((activity) => {
        var beltMatch = (activity.belt == this.selectedBelt);
        var showActivity = ((this.showCompletedActivities == "yes") || activity.grade == null || activity.grade < 3);
        var result = beltMatch && showActivity;
        return result;
      });
      return activities;
    }
  },
  mounted() {
    ninjaService.findNinjaActivities(this.$route.params.guid, r => {
      r.data.forEach(function(activity) {
        if (activity.status == "Not Started") {
          activity.style = "btn btn-xs btn-dark";
        } else if (activity.status == "Started, Incomplete") {
          activity.style = "btn btn-xs btn-danger";
        } else if (activity.status == "Completed, Not Graded") {
          activity.style = "btn btn-xs btn-warning";
        } else if (activity.status == "Complete") {
          if (activity.grade < 3) {
            activity.status = "Needs work";
            activity.style = "btn btn-xs btn-warning";
          } else {
            activity.style = "btn btn-xs btn-primary";
          }
        }
      });
      this.activities = r.data;
    });
    ninjaService.findNinjaJournalComments(this.$route.params.guid, r => {
      var journalComments = r.data;
      journalComments.forEach(function(comment) {
        comment.senseiName = findSenseiName(allSenseis, comment.senseiId);
      })
      this.journalComments = journalComments;
    })
  }
});

var NinjaEdit = Vue.extend({
  template: '#ninja-edit',
  data: function () {
    var currNinja = findNinja(this.$route.params.guid);
    var currStartDate = millisecondsToDateStr(currNinja.startDate);
    var currDateOfBirth = millisecondsToDateStr(currNinja.dateOfBirth);
    var currFrozenDate = null;
    if (currNinja.frozenDate) currFrozenDate = millisecondsToDateStr(currNinja.frozenDate);
    var currHoursLeft = currNinja.hoursAccrued - currNinja.hours;

    return {
      ninja: findNinja(this.$route.params.guid),
      tempStartDate: currStartDate,
      tempDateOfBirth: currDateOfBirth,
      tempNewStartDate: null,
      tempFrozenDate: currFrozenDate,
      applyCarryOverHours: 'no',
      tempCarryOverHours: currHoursLeft,
      beltOptions: beltOptions
    };
  },
  methods: {
    updateNinja: function () {
      this.ninja.startDate = dateStrToMilliseconds(this.tempStartDate);
      this.ninja.dateOfBirth = dateStrToMilliseconds(this.tempDateOfBirth);
      ninjaService.update(this.ninja.guid, this.ninja, r => this.$router.go(-1))
    },
    freezeNinja: function () {
      this.ninja.frozenDate = dateStrToMilliseconds(this.tempFrozenDate);
      ninjaService.update(this.ninja.guid, { guid: this.ninja.guid, frozenDate: this.ninja.frozenDate }, r => this.$router.go(-1));
    },
    unfreezeNinja: function () {
      if (this.applyCarryOverHours == 'yes') {
        this.ninja.carryOverHours = this.tempCarryOverHours;
      } else {
        this.ninja.carryOverHours = 0;
      }
      this.ninja.startDate = dateStrToMilliseconds(this.tempNewStartDate);
      ninjaService.update(this.ninja.guid, { guid: this.ninja.guid, startDate: this.ninja.startDate, carryOverHours: this.ninja.carryOverHours, hours: 0, frozenDate: 0 }, r => this.$router.go(-1));
    }
  }
});

var NinjaBelt = Vue.extend({
  template: '#ninja-belt',
  data: function() {
    return {
      ninja: findNinja(this.$route.params.guid), beltOptions: beltOptions, beltInfo: { beltId: 0, beltVersionNumber: 0 }
    };
  },
  methods: {
    beltSync: function () {
      var updatedNinja = { guid: this.$route.params.guid, belt: this.beltInfo.beltId }
      ninjaService.update(this.$route.params.guid, updatedNinja, r => this.$router.go(-1));
    }
  },
  mounted() {
    ninjaService.findNinjaBelt(this.$route.params.guid, r => {
      this.beltInfo = r.data;
    });
  }
});

var NinjaOrientation = Vue.extend({
  template: '#ninja-orientation',
  data: function() {
    return {
      ninja: findNinja(this.$route.params.guid)
    };
  },
  methods: {
    updateNinja: function () {
      this.ninja.completedOrientation = 1;
      ninjaService.update(this.ninja.guid, this.ninja, r => this.$router.go(-1))
    }
  }
});

var AddNinja = Vue.extend({
  template: '#add-ninja',
  data() {
    return {
      ninja: {guid: 'new-ninja', id: '', name: '', scratchId: '', scratchPassword: '', cocoId: '', cocoPassword: '', startDate: '', dateOfBirth: '', notes: '', belt: 0, preferredSensei: ''},
      beltOptions: beltOptions,
      tempStartDate: null,
      tempDateOfBirth: null
    }
  },
  methods: {
    createNinja() {
      this.ninja.belt = 0; // Start with 0 (white belt)
      this.ninja.hoursStrategy = 0;
      this.ninja.startDate = dateStrToMilliseconds(this.tempStartDate);
      this.ninja.dateOfBirth = dateStrToMilliseconds(this.tempDateOfBirth);
      ninjaService.create(this.ninja, r => this.$router.go(-1))
    }
  }
});

var Waivers = Vue.extend({
  template: '#waivers',
  data() {
    return {
      query: '',
      entries: []
    }
  },
  methods: {
    search() {
      ninjaService.findWaivers(this.query, r => this.entries = r.data )
    }
  },
  mounted() {}
});

var Senseis = Vue.extend({
  template: '#senseis',
  data() {
    return {
      allSenseis: allSenseis, newSensei: { id: 0, name: "" }
    }
  },
  computed: {
    sortedSenseis() {
      return this.allSenseis.sort(function(a, b) { return a.id - b.id });
    }
  },
  methods: {
    createSensei(event) {
      if(typeof(String.prototype.trim) === "undefined") {
        String.prototype.trim = function() {
          return String(this).replace(/^\s+|\s+$/g, '');
        };
      }

      if (this.newSensei.id >= 0 && this.newSensei.name.trim() != "") {
        ninjaService.createSensei(this.newSensei, r => {
          // manually add the entry without remount.
          allSenseis.push({ id: this.newSensei.id, name: this.newSensei.name.trim() });

          // clear the current form
          this.newSensei.id = 0;
          this.newSensei.name = "";
        });
      }
    }
  }
});

Vue.component('card', {
    template: '#card',
    props: ['activity'],
    data() {
      return {}
    }
  });

Vue.component('waiverCard', {
    template: '#waiver-card',
    props: ['customer'],
    methods: {
      getUrl() {
        var url = 'https://www.cognitoforms.com/CodeNinjas16/ParentAgreementWaiverAndRelease?entry={"ParentsInformation":{"PrimaryParentsName":{"First":"' +
          this.customer.firstName + '","Last":"' + this.customer.lastName + '"}},"EmergencyContacts2":[{}],"Info":[';
        var numChildren = 0;
        this.customer.children.forEach(function(child) {
          if (numChildren > 0) url += ',';
          url += '{"Name":{"First":"' + child.firstName + '","Last":"' + child.lastName + '"},"Programs":{"RegisteredFor":["';

          // For now assume drop in only
          url += child.programs[0].name + '"]'

          if (child.programs[0].name.startsWith("CREATE")) {
            url += ',"DROPINPROGRAM":{"EnrollmentDate":"' + dateToYMD(new Date(child.programs[0].date)) + '","Subscription":"' + child.programs[0].subscription + '",';
            url += '"BeltAdvancementFee":"' + child.programs[0].beltAdvancementFee + '"}';
          }
          url += '}}';
          numChildren++;
        });
        url += ']}';
        return url;
      },
      copyToClipboard() {
        var el = document.createElement('textarea');
        el.value = this.getUrl();
        el.setAttribute('readonly', '');
        el.style = {position: 'absolute', left: '-9999px'};
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
      }
    },
    data() {
      return {}
    }
  });

var router = new VueRouter({
	routes: [
		{path: '/', component: List, name: 'root'},
		{path: '/ninja/:guid', component: Ninja, name: 'ninja'},
		{path: '/add-ninja', component: AddNinja, name: 'add-ninja'},
		{path: '/ninja/:guid/edit', component: NinjaEdit, name: 'ninja-edit'},
		{path: '/ninja/:guid/orientation', component: NinjaOrientation, name: 'ninja-orientation'},
    {path: '/ninja/:guid/belt', component: NinjaBelt, name: 'ninja-belt'},
    {path: '/waivers', component: Waivers, name: 'waivers'},
    {path: '/senseis', component: Senseis, name: 'senseis'}
	]
});

var vm = new Vue({
  router
}).$mount('#app');

